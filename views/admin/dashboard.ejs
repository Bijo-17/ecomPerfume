
<%- include("../../views/partials/admin/header") %>
<style>
 

  .btn {
    /* Add your button styling here */
    margin: 0 5px;
    padding: 5px 10px;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    text-decoration: none;
    color: #333;
  }

  .active {
    /* Add styles for the active page */

    color: #fff;
  }

  .btn:hover {
    /* Add styles for button hover state */
    background-color: #ddd;
  }

  .table-spacing th,
  .table-spacing td {
    padding-left: 80px; /* Adjust the value as needed for the desired spacing */
  }

  .table-responsive {
  width: 100%;
  overflow-x: auto;
}


  .pagination .page-item.active .page-link {
    background-color: #f0f0f0;
    border-color: #ccc;
    color: #333;
    box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  }

 

  .pagination .page-link {
    color: #088178;
    background:#f0f0f0;
    border-radius: 6px;
    margin: 0 3px;
    transition: 0.3s ease-in-out;
  }

  .pagination .page-link:hover {
    background-color: #f0f0f0;
  }


</style>

<div class="content-header row">
  <div class="d-flex justify-content-between align-items-center">
    <h2 class="content-title card-title">Dashboard</h2>
  </div>
</div>

<!-- Filter Dropdown -->

<div class="row"> 
  
  <div class="col-md-12 mb-4">
<select  class="form-select w-25 mb-4" onchange="changeChartStatus(this.value)">
  <option>All</option>
  <option value="daily">Today</option>
  <option value="weekly">This Week</option>
  <option value="monthly">This Month</option>
  <option value="yearly">This Year</option>
</select>
  </div>
<!-- Pie Chart Canvas -->
<div class="col-md-6 mb-4">
 <div style="max-width: 300px; margin: auto; background: #fff;">
  <canvas id="orderPieChart"></canvas>
</div>

</div>

  <div class="col-md-6 mb-4">


 <div  style="max-width: 500px; margin: auto; background: #fff;">
  <h6>Top selling items</h6>
  <canvas id="topSellingProduct"></canvas>
</div>

  </div>

    <div class="col-md-6 mb-4">


 <div  style="max-width: 500px; margin: auto; background: #fff;">
  <h6>Top selling categories</h6>
  <canvas id="topSellingCategories"></canvas>
</div>

 </div>

<div class="col-md-6 mb-4">


 <div  style="max-width: 500px; margin: auto; background: #fff;">
  <h6>Top selling brands</h6>
  <canvas id="topSellingBrands"></canvas>
  </div>
</div> 
  
</div>


<div class="container py-4">
  <div class="row g-4">
    
    <!-- Card 1 -->
    <div class="col-12 col-sm-6 col-lg-3">
      <div class="p-4 shadow rounded-4 bg-white h-100">
        <h6 class="text-muted">Total Orders</h6>
        <h3 class="fw-bold" id="totalOrders">28</h3>
       
      </div>
    </div>

    <!-- Card 2 -->
    <div class="col-12 col-sm-6 col-lg-3">
      <div class="p-4 shadow rounded-4 bg-white h-100">
        <h6 class="text-muted">Total Revenue</h6>
        <h3 class="fw-bold" id="totalRevenue">₹717,142.94</h3>
      
      </div>
    </div>

    <!-- Card 3 -->
    <div class="col-12 col-sm-6 col-lg-3">
      <div class="p-4 shadow rounded-4 bg-white h-100">
        <h6 class="text-muted">Total Discounts</h6>
        <h3 class="fw-bold" id="totalDiscount">₹14,467.06</h3>
     
      </div>
    </div>

    <!-- Card 4 -->
    <div class="col-12 col-sm-6 col-lg-3">
      <div class="p-4 shadow rounded-4 bg-white h-100">
        <h6 class="text-muted">Average Order Value</h6>
        <h3 class="fw-bold" id="averageOrderValue">₹</h3>
        <p class="text-primary small mt-1">Based on completed orders</p>
      </div>
    </div>

  </div>
</div>


<div class="card mb-4">
  <header class="card-header">
    <div class="container-fluid">
      
      <!-- Row 1: Report Type | Order Status | Export -->
      <div class="row gy-3 gx-3 align-items-end">
        
        <!-- Report Type -->
        <div class="col-lg-2 col-md-3 col-6">
          <label class="form-label">Report Type</label>
          <select class="form-select" id="reportType"
            onchange="location.href='/admin?day=' + this.value + '&status=<%= selectedStatus %>'">
            <% if (salesToday) { %>
              <option value="salesToday" selected>Sales Today</option>
              <option value="">All</option>
              <option value="salesWeekly">Sales Weekly</option>
              <option value="salesMonthly">Sales Monthly</option>
              <option value="salesYearly">Sales Yearly</option>
            <% } else if (salesWeekly) { %>
              <option value="salesWeekly" selected>Sales Weekly</option>
              <option value="">All</option>
              <option value="salesToday">Sales Today</option>
              <option value="salesMonthly">Sales Monthly</option>
              <option value="salesYearly">Sales Yearly</option>
            <% } else if (salesMonthly) { %>
              <option value="salesMonthly" selected>Sales Monthly</option>
              <option value="">All</option>
              <option value="salesToday">Sales Today</option>
              <option value="salesWeekly">Sales Weekly</option>
              <option value="salesYearly">Sales Yearly</option>
            <% } else if (salesYearly) { %>
              <option value="salesYearly" selected>Sales Yearly</option>
              <option value="">All</option>
              <option value="salesToday">Sales Today</option>
              <option value="salesWeekly">Sales Weekly</option>
              <option value="salesMonthly">Sales Monthly</option>
            <% } else { %>
              <option value="" selected>All</option>
              <option value="salesToday">Sales Today</option>
              <option value="salesWeekly">Sales Weekly</option>
              <option value="salesMonthly">Sales Monthly</option>
              <option value="salesYearly">Sales Yearly</option>
            <% } %>
          </select>
        </div>

        <!-- Order Status -->
        <div class="col-lg-2 col-md-3 col-6">
          <label class="form-label">Order Status</label>
          <select class="form-select" id="orderStatus" onchange="onStatusChange(this.value)">
            <option disabled selected value="">Select Status</option>
            <option value="all">All</option>
            <option value="delivered" <%= selectedStatus === 'delivered' ? 'selected' : '' %>>Delivered</option>
            <option value="pending" <%= selectedStatus === 'pending' ? 'selected' : '' %>>Pending</option>
            <option value="cancelled" <%= selectedStatus === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
            <option value="returned" <%= selectedStatus === 'returned' ? 'selected' : '' %>>Returned</option>
            <option value="failed" <%= selectedStatus === 'failed' ? 'selected' : '' %>>Failed</option>
          </select>
        </div>

        <!-- Export Buttons -->
        <div class="col-lg-8 col-md-6 text-md-end">
          <div class="d-flex flex-wrap justify-content-md-end gap-2">
            <button id="createSalesReport" class="btn btn-primary" onclick="exportSalesReport('pdf')">Generate PDF</button>
            <button id="downloadExcelReport" class="btn btn-primary" onclick="exportSalesReport('excel')">Download Excel</button>
          </div>
        </div>
      </div>

      <!-- Row 2: Date Filters + Buttons (Inline) -->
      <div class="row gy-3 gx-3 align-items-end mt-3">

        <!-- Filter By: Single / Range -->
        <div class="col-lg-2 col-md-3 col-6">
          <label class="form-label">Filter By</label>
          <select id="dateMode" class="form-select" onchange="switchDatePicker()">
            <option value="single">Single Date</option>
            <option value="range" <%=dateRange ? 'selected' : '' %> >Date Range</option>
          </select>
        </div>

        <!-- Single Date -->
      
            <div class="col-lg-2 col-md-3 col-6" id="singleDateContainer">
          <label class="form-label">Select Date</label>
          <input type="text" id="flatpickrSingle" class="form-control" value="<%=date %>" placeholder="<%=(singleDate || 'Pick a date')%> " />
        </div>
    
        <!-- Range Date --> 
        <div class="col-lg-2 col-md-3 col-6 d-none" id="rangeDateContainer">
          <label class="form-label">Select Date Range</label>
          <input type="text" id="flatpickrRange" class="form-control" value="<%=dateRange %>" placeholder="<%= (dateRange || 'Pick a date range') %>" />
        </div>
   
        <!-- Apply Button -->
        <div class="col-lg-2 col-md-3 col-6">
          <label class="form-label d-none d-md-block invisible">Apply</label>
          <button class="btn btn-dark w-100" onclick="applyDateFilter()">Apply</button>
        </div>

        <!-- Clear Button -->
        <div class="col-lg-2 col-md-3 col-6">
          <label class="form-label d-none d-md-block invisible">Clear</label>
          <button class="btn btn-secondary w-100" onclick="location.href='/admin'">Clear</button>
        </div>

      </div>
    </div>
  </header>
</div>


<div class="table-responsive"> 

<div class="right mt-5 container">
  <!-- <input type="date" id="calendar" name="calendar" class="form-control mb-3" /> -->
  <table id="salesTable" class="table table-responsive table-hover" >
    <thead>
      <tr>
        <th>#</th>
        <th>order ID</th>
        <th scope="col">Name</th>
        <th scope="col">Product</th>
        <th scope="col">Date</th>
        <th scope="col">Payment</th>
        <th scope="col">Status</th>
        <th scope="col">Discount</th>
        <th scope="col">Price</th>
        <th scope="col" >Total Price</th>
      </tr>
    </thead>
    <tbody>
      <% let grandTotal = 0; %> <% for (let i = 0; i < data.length; i++) { %>
      <tr>
        <td><%= i + 1 %></td>
        <td><%= data[i].order_id %></td>
        <td><b><%= data[i].address_id?.name || data[i].temp_address.name %></b></td>
        <td><b><% data[i].order_items.forEach(product=>{%>
             <%= product.product_id._id %>  (<%= product.product_id.product_name %> x <%= product.quantity %> (<%=product?.volume %> ML)) <br>
      <% }) %>
        
        </b></td>
        <td><%= data[i].createdAt.toLocaleString('en-IN') %></td>
        <td><%= data[i].payment_method.method %></td>
        <td><% data[i].order_items.forEach(items=>{ %>
                <%= items.order_status %> <br>   
         <% }) %></td>
         <td class="text-end"><%=data[i].discount%></td>
        <td > <% data[i].order_items.forEach(product=>{%>
             <%= product.product_price %>
           <br>
           <% })%>
        </td>
        <td class="text-end"> <%= data[i].total_price %></td>
      </tr>
      <% grandTotal += data[i].total_price; %> <% } %>
    </tbody>
    <tfoot>
      <tr>
        <td colspan="9" class="text-end"><b>Grand Total:</b></td>
        <td class="text-end"><b><%= grandTotal.toFixed(2) %></b></td>
      </tr>
    </tfoot>
  </table>
</div>
  <% if (totalPages) { %>
  <div class="container-fluid my-4">
         
        <nav aria-label="Page navigation">
              <ul class="pagination justify-content-center">
         
               <% if (currentPage > 1) { %>
                    <li class="page-item">
                      <a class="page-link" href="?page=1&status=<%=selectedStatus %>&date=<%=date%>&day=<%=day%>&start=<%=start%>&end=<%=end%>">First</a>
                    </li>
                  <li class="page-item">
                      <a class="page-link" href="?page=<%= currentPage - 1 %>&status=<%=selectedStatus %>&date=<%=date%>&day=<%=day%>&start=<%=start%>&end=<%=end%>">Prev</a>
                  </li>
               <% } %>

                   <% 
                      let startPage = Math.max(1, currentPage - 1);  
                      let endPage = Math.min(totalPages, startPage + 3);  

                      if (endPage - startPage < 3) {
                         startPage = Math.max(1, endPage - 3);  
                       }
                    %>

                   <% for (let i = startPage; i <= endPage; i++) { %>
                      <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>&status=<%=selectedStatus %>&date=<%=date%>&day=<%=day%>&start=<%=start%>&end=<%=end%>"><%= i %></a>
                      </li>
                   <% } %>

                    <% if (endPage < totalPages) { %>
                        <li class="page-item disabled">
                           <span class="page-link">...</span>
                        </li>


                        <li class="page-item">
                            <a class="page-link" href="?page=<%= totalPages %>&status=<%=selectedStatus %>&date=<%=date%>&day=<%=day%>&start=<%=start%>&end=<%=end%>"><%= totalPages %></a>
                        </li>
                     <% } %>
                    
                     <% if (totalPages > currentPage) { %> 
                            
                              <li class="page-item">
                                <a class="page-link" href="?page=<%= currentPage+1 %>&status=<%=selectedStatus %>&date=<%=date%>&day=<%=day%>&start=<%=start%>&end=<%=end%>" >Next</a>
                              </li>
                                         
                     <% } %>

              </ul>
            </nav>


  </div>
<% } %>

  <div class="m-4"></div>

 

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>


  <script>

    
  async function exportSalesReport(format) {
    try {
      // Get selected filter values from inputs
       let reportType = document.getElementById('reportType')?.value || 'all'
      const singleDate = document.getElementById('flatpickrSingle')?.value || '';
      const dateRange = document.getElementById('flatpickrRange')?.value || '';
      const paymentMethod = document.getElementById('paymentMethod')?.value || 'all';
      const orderStatus = document.getElementById('orderStatus')?.value || 'all';
    
      let startDate = '';
      let endDate = '';
    
      if(dateRange){ 
     console.log("singel date" , singleDate , dateRange)
        const parts = dateRange.split(" to ");
        if(parts.length === 2){ 
         [ startDate , endDate ]  = parts ;
         
        }
         console.log("startDate", startDate , "end", endDate)
      } 


      // Build JSON object to send
      const requestData = {
        reportType,
        singleDate,
        startDate,
        endDate,
        paymentMethod,
        orderStatus,
        format
      };

      const response = await fetch('/admin/generatePdf', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

     

      if (!response.ok) {
        const error = await response.json();
        alert(error.message || "Something went wrong");
        return;
      }

      const blob = await response.blob();
      const downloadUrl = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = downloadUrl;
      a.download = `sales_report.${format === "excel" ? "xlsx" : "pdf"}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);

    } catch (err) {
      console.error("Export error:", err);
      alert("Failed to export sales report.");
    }
  }
     



   
  function onStatusChange(value) {
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set("status", value);

    // Retain other filters like day
    const currentDay = urlParams.get("day") || "";
    const start = urlParams.get("start") || "";
    const end = urlParams.get("end") || "";
    const dateWiseFilter =  urlParams.get("date") || "";
    if(start && end){
        window.location.href = `/admin?start=${start}&end=${end}&status=${value}`;
    } else if(currentDay){ 
    window.location.href = `/admin?day=${currentDay}&status=${value}`;
    }else {
        window.location.href = `/admin?date=${dateWiseFilter}&status=${value}`;
    }
  }

  //for chart 

  let pieChart;

  async function chartData(filter){
     console.log("filter" , filter)
       const res = await fetch(`/admin/chart?query=${filter}`)
       const data = await res.json();


       const labels =  ["Delivered" , "Pending" , "Cancelled" , "Returned"  , "Failed" , "Out for Delivery"]

       const values = [ 
                          data.delivered,
                          data.pending,
                          data.cancelled,
                          data.returned,
                          data.failed,
                          data.out_for_delivery
       ]

         const colors = ["#28a745", "#ffc107", "#dc3545", "#6c757d", "#542828" ,"#E1E99D"];

         if(pieChart) pieChart.destroy();

         const ctx = document.getElementById('orderPieChart').getContext('2d');
      
         pieChart = new Chart(ctx, {
            type:'doughnut',
            data:{
               labels,
               datasets:[{
                  label: 'Order Status',
                  data:values,
                  backgroundColor : colors

               }]
            },
            options: {
               responsive: true,
               plugins:{ 
                legend: {position:'bottom'},
                tooltip:{
                   callbacks: {
                     label: function(context) { 
                       const label = context.label || '';
                       const value = context.parsed;
                       return `${label} : ${value}`
                    
                     }
                   }
                }
               }
            }

         })
  }


  let productChart;

  async function topItems(filter){
     console.log("filter" , filter)
       const res = await fetch(`/admin/topItems?query=${filter}`)
       const data = await res.json();

       const labels =  data.topProducts.map(p=> p.product_name)

       const values =  data.topProducts.map(p=> p.totalSold)
  
        if(productChart) productChart.destroy()

         const ctx = document.getElementById('topSellingProduct').getContext('2d'); 
      
          productChart = new Chart(ctx, {
            type:'line',
            data:{
               labels:labels,
               datasets:[{
                  label: 'unit sold',
                  data:values,
                  fill: false,
                  borderColor: 'rgba(75, 192, 192, 1)',
                  tension: 0.3,
                  pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                  pointRadius: 5

               }]
            },
            options: {
               responsive: true,
               plugins:{ 
                legend: {postion:'top'},
                tooltip:{
                   callbacks: {
                     label: context => `Units: ${context.parsed.y}`
                   
                    
                     
                   }
                }
               },
                scales: {
                  x: { 
                          title:{
                             display:true,
                             text:'Product'
                          },
                       ticks: {
                        maxRotation: 45,
                        minRotation: 45,
                           autoSkip: false
                          }
                    },  
                   
                  y: {
            title: {
              display: true,
              text: 'Units Sold'
            },
            beginAtZero: true
          }
        }
      }
    });   

               
  }

  let categoryChart;
  
  async function topCategories(filter){
     console.log("filter" , filter)
       const res = await fetch(`/admin/topItems?query=${filter}`)
       const data = await res.json();

   

       const labels =  data.topCategories.map(p=> p.category_name)

       const values =  data.topCategories.map(p=> p.totalSold)
  
    if(categoryChart) categoryChart.destroy()
         const ctx = document.getElementById('topSellingCategories').getContext('2d'); 
      
          categoryChart  = new Chart(ctx, {
            type:'line',
            data:{
               labels:labels,
               datasets:[{
                  label: 'unit sold',
                  data:values,
                  fill: false,
                  borderColor: 'rgba(75, 192, 192, 1)',
                  tension: 0.3,
                  pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                  pointRadius: 5

               }]
            },
            options: {
               responsive: true,
               plugins:{ 
                legend: {postion:'top'},
                tooltip:{
                   callbacks: {
                     label: context => `Units: ${context.parsed.y}`
                   
                    
                     
                   }
                }
               },
                scales: {
                  x: { 
                          title:{
                             display:true,
                             text:'Product'
                          },
                       ticks: {
                        maxRotation: 45,
                        minRotation: 45,
                           autoSkip: false
                          }
                    },  
                   
                  y: {
            title: {
              display: true,
              text: 'Units Sold'
            },
            beginAtZero: true
          }
        }
      }
    });   

               
  }

  let brandChart;
  
  async function topBrands(filter){
  
       const res = await fetch(`/admin/topItems?query=${filter}`)
       const data = await res.json();

  

       const labels =  data.topBrands.map(p=> p.brand_name)

       const values =  data.topBrands.map(p=> p.totalSold)
  
       if(brandChart) brandChart.destroy()

         const ctx = document.getElementById('topSellingBrands').getContext('2d'); 
      
          brandChart = new Chart(ctx, {
            type:'line',
            data:{
               labels:labels,
               datasets:[{
                  label: 'unit sold',
                  data:values,
                  fill: false,
                  borderColor: 'rgba(75, 192, 192, 1)',
                  tension: 0.3,
                  pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                  pointRadius: 5

               }]
            },
            options: {
               responsive: true,
               plugins:{ 
                legend: {postion:'top'},
                tooltip:{
                   callbacks: {
                     label: context => `Units: ${context.parsed.y}`
                   
                    
                     
                   }
                }
               },
                scales: {
                  x: { 
                          title:{
                             display:true,
                             text:'Brands'
                          },
                       ticks: {
                        maxRotation: 45,
                        minRotation: 45,
                           autoSkip: false
                          }
                    },  
                   
                  y: {
            title: {
              display: true,
              text: 'Units Sold'
            },
            beginAtZero: true
          }
        }
      }
    });   


    document.getElementById('totalOrders').textContent = data.totalSales.totalOrders;
    document.getElementById('totalRevenue').textContent = '₹'+ data.totalSales.totalRevenue;
    document.getElementById('totalDiscount').textContent = '₹'+data.totalSales.totalDiscount;
    document.getElementById('averageOrderValue').textContent = '₹'+data.totalSales.averageOrderValue ;
               
  }
  


    
  
      function changeChartStatus(value){

         chartData(value)     
         topItems(value)
         topCategories(value)
         topBrands(value)
         
      }


         chartData()
      
         topItems()
         topCategories()
         topBrands()

// for date selection

   let selectedDate = "";
  let selectedRange = "";

  // Initialize both pickers
  flatpickr("#flatpickrSingle", {
    dateFormat: "Y-m-d",
    onChange: function (selectedDates, dateStr) {
      selectedDate = dateStr;
    }
  });

  flatpickr("#flatpickrRange", {
    mode: "range",
    dateFormat: "Y-m-d",
    onChange: function (selectedDates, dateStr) {
      selectedRange = dateStr;
    }
  });

  // Toggle visibility based on filter type
  function switchDatePicker() {
    const mode = document.getElementById("dateMode").value;
    const single = document.getElementById("singleDateContainer");
    const range = document.getElementById("rangeDateContainer");

    if (mode === "single") {
      single.classList.remove("d-none");
      range.classList.add("d-none");
    } else {
      single.classList.add("d-none");
      range.classList.remove("d-none");
    }
  }

  switchDatePicker();

  // Apply filter
  function applyDateFilter() {
    const mode = document.getElementById("dateMode").value;
    const urlParams = new URLSearchParams(window.location.search);
    const status = urlParams.get("status") || 'all'

    if (mode === "single") {
      if (!selectedDate) return alert("Please pick a date.");
      window.location.href = `/admin?date=${selectedDate}&status=${status}`;
    } else {
      if (!selectedRange || !selectedRange.includes("to")) return alert("Please pick a valid date range.");
      const [start, end] = selectedRange.split(" to ");
      window.location.href = `/admin?start=${start}&end=${end}&status=${status}`;
    }
  }



  </script>

<%- include("../../views/partials/admin/footer") %>


