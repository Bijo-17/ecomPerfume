<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />


<style>
   .error-message{
       color: red;
   }


       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }


       .thumbnail span {
    cursor: pointer;
    color: red;
    margin-left: 8px;
    font-weight: bold;
}

.thumbnail {
    display: inline-flex;
    align-items: center;
    margin-right: 10px;
}

.remove-icon {
    font-size: 20px;
    color: red;
}


</style>

</head>
<body>
    
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Add New Product</h2>
               </div>
           </div>

           <% if(locals.messsge){ %>
                  <div class="col-9">
               <div class="content-header">
                   <h5 class="content-title"><%= message %></h5>
               </div>
           </div>
           
         <%  } %>
           <div class="col-lg-6">
               <div class="card mb-4">
                   <div class="card-body">
                       <form method="post" action="/admin/addProduct" enctype="multipart/form-data"
                           onsubmit="return validateForm() ">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" placeholder="Type here" name="productName"
                                   class="form-control border" id="product_name">
                               <div id="productName-error" class="error-message"></div>
                           </div>

                           <!-- <div class="col-lg-4 mb-4">
                               <label class="form-label">Brand</label>
                               <select class="form-select border" name="brand">
                                   
                                
                                       <option value="">
                                           


                                         
                                       </option>
                                       
                                     
                               </select>
                               <div id="brand-error" class="error-message"></div>
                           </div> -->

                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                                   rows="4"></textarea>
                               <div id="description-error" class="error-message"></div>
                           </div>
                         

                       <div class="card card-body"> 
                           <div class="row" id="varients-field">
                              <h4 class="mb-2">Varients </h4>

                            <div class="col-lg-4">
                             <div class="mb-4">
                            <label class="form-label">Volume (ML)</label>

                             <div id="volume-fields">
                                  <div class="input-group mb-2">
                            <input name="volume" type="number" id="volume" class="form-control border" placeholder="Enter volume in ML">
                        
                             </div>
                                
                           </div>

                      <div id="volume-error" class="error-message"></div>
                         </div>
                    </div> 

                        <div class="col-lg-7">
                             <div class="mb-4">
                            <label class="form-label">  Stock </label>

                             <div id="stock-fields">
                                <div class="input-group mb-2">
                            <input name="stock" type="number" id="stock" class="form-control border mr-4" placeholder="Stock">
                                 <button type="button" class="btn btn-sm btn-outline-secondary " style="margin-left:  3rem ;" onclick="addVarient()">Add More</button>
                             </div>
                                          
                           </div>

                      <div id="stock-error" class="error-message"></div>
                         </div>
                    </div>

                    <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Regular price</label>
                                       <input placeholder="₹" name="regularPrice" type="text" id="regularPrice"
                                           class="form-control border">
                                           <div id="regularPrice-error" class="error-message"></div>
                                   </div>
                                        
                       </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Sale price</label>
                                       <input placeholder="₹" name="salesPrice" id="salesPrice" type="text" class="form-control border">
                                       <div id="salePrice-error" class="error-message"></div>
                                   </div>
                                   
                 
                                </div>


         <!-- <div class="col-md-12"> 

                <div class="card " style="width: 28rem;">
                        <div class="card-header bg-light "> <label>  Varients  </label>
                              <button type="button" class="btn btn-sm btn-outline-danger mx-1 "  onclick="addVarient()"> x </button>
                        </div>
                         
              <ul class="list-group"> 
                  <li class="list-group-item">   
                       <div class="row"> 

                             <div class="col-md-6 mb-2">
                                <label class="form-label">Volume (ML)</label>                    
                                    <input name="volume[]" type="number" id="volume" class="form-control border" placeholder="Enter volume in ML">                                   
                                 <div id="volume-error" class="error-message"></div>
                              </div>  

                            <div class="col-md-6 col-sm-8">
                                <label class="form-label">  Stock </label>                                                     
                                   <input name="stock" type="number" id="stock" class="form-control border"  placeholder="Stock">
                               <div id="stock-error" class="error-message"></div>                                         
                           </div>

                          <div class="col-md-6 col-sm-4">                             
                                <label class="form-label">Regular price</label>
                                  <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                       <div id="regularPrice-error" class="error-message"></div>                           
                           </div>

                              <div class="col-md-6 col-sm-4">
                                 
                                       <label class="form-label">Sale price</label>
                                       <input placeholder="$" name="salesPrice" type="text" class="form-control border">
                                       <div id="salePrice-error" class="error-message"></div>
                                  
                              </div>

                           </div>
                           </li>
                                     
                               </ul>                     
                         </div>
                 </div> -->
                                
                  
                            
                        
                        
                  </div>
                </div>
                           
                            <!-- categories -->

                           <div class="card mb-4">
                               <div class="card-body">
                                   <div class="row gx-2">
                                       
                                     <!-- brand -->
                                      
                                      <div class="col-sm-6 col-md-4 mb-3">
                                           <label class="form-label">Brand</label>
                                           <select class="form-select border" style="width: 150px;" name="brand">
                                        <% for(let i=0;i<brand.length ; i++) {%>
                                            
                                              
                                                   <option value="<%=brand[i].name%>">
                                                      <%=brand[i].name%>
                                                       
                                                   </option>

                                                  <%}%>
                                                 
                                                   
                                           </select>
                                           <div id="brand-error" class="error-message"></div>
                                       </div>

                                       <!-- category -->

                                       <div class="col-sm-6 col-md-4 mb-3">
                                           <label class="form-label">Category</label>
                                           <select class="form-select border" style="width: 150px;" name="categoryId" id="category" onchange="filterSubcategories()"> 

                                            <option value="" >Select Category </option>
                                        <% for(let i=0;i<cat.length ; i++) {%>                                     
                                                   <option value="<%=cat[i]._id%>">
                                                      <%=cat[i].name%>                                               
                                                   </option>
                                                  <%}%>                                       
                                                   
                                           </select>
                                           <div id="category-error" class="error-message"></div>
                                       </div>
                                       
                                        <!-- subcategory -->

                                       <div class="col-sm-6 col-md-4 mb-3">
                                        <label class="form-label">Subcategory</label>
                                        <select class="form-select border" style="width: 150px;" name="subcategory" id="subcategory">

                                              <option value=""></option>
                                        
                                        </select>
                                        <div id="subcategory-error" class="error-message"></div>
                                    </div>
                                      
                                   </div>
                               </div>
                           </div>
                           <div class="card mb-2">
                               <div class="card-header">
                                   <h4>Choose images</h4>
                               </div>
                               <div class="border row">
                                   <div id="addedImagesContainer" class="thumbnails-container"></div>
                               </div>

                           <!-- // new code for croppig image -->

  <div class="row">

   <div class="card-body align-items-center" style="margin-bottom: 20px;">
    <input class="form-control" type="file" name="images" id="input1"
      accept="image/png, image/jpeg, image/jpg, image/webp "
      onchange="viewImage(event, 1)">
  </div>
  <div class="image-cropper d-flex align-items-center flex-column" id="cropperContainer1"
    style=" width: 300px; height: auto; margin-bottom: 20px;">
    <img src="" id="imgView1" alt="" style="max-width: 100%;">
   
    <img src="" id="croppedImg1" alt="" style="margin-top: 10px;">
     <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
  </div>
</div>
                      
    <div class="row">
  <div class="card-body align-items-center" style="margin-bottom: 20px;">
    <input class="form-control" type="file" name="images" id="input2"
      accept="image/png, image/jpeg, image/jpg, image/webp"
      onchange="viewImage(event, 2)">
  </div>
  <div class="image-cropper d-flex align-items-center flex-column" id="cropperContainer2"
    style=" width: 300px; height: auto; margin-bottom: 20px;">
    <img src="" id="imgView2" alt="" style="max-width: 100%;">
   
    <img src="" id="croppedImg2" alt="" style="margin-top: 10px;">
     <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
  </div>
</div>

           <div class="row">
  <div class="card-body align-items-center" style="margin-bottom: 20px;">
    <input class="form-control" type="file" name="images" id="input3"
      accept="image/png, image/jpeg, image/jpg, image/webp"
      onchange="viewImage(event, 3)">
  </div>
  <div class="image-cropper d-flex align-items-center flex-column" id="cropperContainer3"
    style="display:none; width: 300px; height: auto; margin-bottom: 20px;">
    <img src="" id="imgView3" alt="" style="max-width: 100%;">
   
    <img src="" id="croppedImg3" alt="" style="margin-top: 10px;">
     <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
  </div>
</div>


           <div class="row">
  <div class="card-body align-items-center" style="margin-bottom: 20px;">
    <input class="form-control" type="file" name="images" id="input4"
      accept="image/png, image/jpeg, image/jpg, image/webp"
      onchange="viewImage(event, 4)">
  </div>
  <div class="image-cropper d-flex align-items-center flex-column" id="cropperContainer4"
    style="display:none; width: 300px; height: auto; margin-bottom: 20px;">
    <img src="" id="imgView4" alt="" style="max-width: 100%;">
   
    <img src="" id="croppedImg4" alt="" style="margin-top: 10px;">
     <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
  </div>
</div>
 <div id="images-error" class="error-message"></div>


                               <!-- <div class="row">
                                   <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                       <img src="" alt="" id="imgView1">
                                                                   <input class="form-control" type="file" name="images" id="input1"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage1(event), viewImage(event, 1)">
                                                                       <div id="images-error" class="error-message"></div>
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg1" alt="">
                                                                   <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div> -->
                                                        
                                                          
                                                      
                          
                                                       </div>
                           </div>
                           <div>
                            <button class="btn btn-md rounded font-sm hover-up"  type="button" onclick="validateAndSubmit()">Publish</button>
                           </div>
                       </form>
                   </div>
               </div>
           </div>
       </div>
   </section>

   <script type="application/json" id="subcat">
         <%- JSON.stringify(subcat) %>
</script>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>




<script>

async function validateAndSubmit(){

          if(validateForm()){
        document.forms[0].submit();

    }   
}
       
   // subcategory filtering


  const rawSubcat = document.getElementById('subcat').textContent;
  const allSubcategory = JSON.parse(rawSubcat)

  
   function filterSubcategories(){

     const selectedCategoryId = document.getElementById('category').value;
     const subcategorySelect =  document.getElementById('subcategory')

    subcategorySelect.innerHTML = '<option value="">select subcategory </option>';

    const filtered = allSubcategory.filter(sub=>sub.category_id._id === selectedCategoryId)
    
    filtered.forEach(sub=>{
        const option = document.createElement("option");
        option.value = sub.name;
        option.text = sub.name;
        subcategorySelect.appendChild(option)

    })

   }

  


  function addVarient(){


  const container = document.getElementById("varients-field")
       
     const mainCard  = document.createElement("div");
     mainCard.className = "col-md-12";

     const card = document.createElement("div");
     card.className = "card"
     card.style.width = "28rem";
     
     const header = document.createElement("div");
     header.className = "card-header bg-light"
     const varientText = document.createElement("label")
     varientText.innerText = "Varients";

     const removeBtn = document.createElement("button");
     removeBtn.type = "button";
     removeBtn.className = "btn btn-sm btn-outline-danger mx-1";
     removeBtn.innerText = "x";
     removeBtn.onclick = ()=> mainCard.remove()
    
  
     const ul = document.createElement("ul");
     ul.className = "list-group";
     const li = document.createElement("li");
     li.className= "list-group-item"

     const divRow = document.createElement("div");
      divRow.className = "row"
    
     const colDiv1 = document.createElement("div");
      colDiv1.className = "col-md-6 mb-2"

     const volLabel = document.createElement("label")
      volLabel.className = "form-label"
      volLabel.innerText = "Volume (ML)"
     
      const volInput = document.createElement("input");
        volInput.type = "number";
        volInput.name = "volume";
        volInput.className = "form-control border"
        volInput.placeholder = "Enter volume in ML"

      const volError = document.createElement("div");
            volError.id = "volume-error";
            volError.className = "error-message";

      const colDiv2 = document.createElement("div");
          colDiv2.className = "col-md-6";  
       const stockLabel = document.createElement("label");
           stockLabel.className = "form-label"
           stockLabel.innerText = "Stock"
       const stockInput = document.createElement("input")  
           stockInput.type= "nubmer";
           stockInput.name = "stock";
           stockInput.id = "stock";
           stockInput.className = "form-control border"
           stockInput.placeholder = "stock"
       const stockError = document.createElement("div")
            stockError.id="stock-error";
            stockError.className = "error-message";

       const colDiv3 = document.createElement("div");
          colDiv3.className = "col-md-6";  
       const regularPriceLabel = document.createElement("label");
            regularPriceLabel.className = "form-label"
           regularPriceLabel.innerText = "Regular Price"
       const regularPriceInput = document.createElement("input")  
           regularPriceInput.type= "number";
           regularPriceInput.name = "regularPrice";
           regularPriceInput.id = "regularPrice";
           regularPriceInput.className = "form-control border"
           regularPriceInput.placeholder = "₹"
       const regularPriceError = document.createElement("div")
            regularPriceError.id="regularPrice-error";
            regularPriceError.className = "error-message";
            
        const colDiv4 = document.createElement("div");
          colDiv4.className = "col-md-6";  
       const salesPriceLabel = document.createElement("label");
            salesPriceLabel.className = "form-label"
            salesPriceLabel.innerText = "Sales Price"
       const salesPriceInput = document.createElement("input")  
           salesPriceInput.type= "number";
           salesPriceInput.name = "salesPrice";
           salesPriceInput.id = "salesPrice";
           salesPriceInput.className = "form-control border"
           salesPriceInput.placeholder = "₹"
       const salesPriceError = document.createElement("div")
            salesPriceError.id="salesPrice-error";
            salesPriceError.className = "error-message";    

    
         header.appendChild(varientText)
         header.appendChild(removeBtn)
         card.appendChild(header)  
         card.appendChild(ul)  
          ul.appendChild(li)
          li.appendChild(divRow)
          divRow.appendChild(colDiv1)
          colDiv1.appendChild(volLabel)
          colDiv1.appendChild(volInput)
          colDiv1.appendChild(volError)
  
        
           colDiv2.appendChild(stockLabel)
           colDiv2.appendChild(stockInput)
           colDiv2.appendChild(stockError)
           divRow.appendChild(colDiv2)

           colDiv3.appendChild(regularPriceLabel)
           colDiv3.appendChild(regularPriceInput)
           colDiv3.appendChild(regularPriceError)
           divRow.appendChild(colDiv3)

           colDiv4.appendChild(salesPriceLabel)
           colDiv4.appendChild(salesPriceInput)
           colDiv4.appendChild(salesPriceError)
           divRow.appendChild(colDiv4)
   
         mainCard.appendChild(card)   
        container.appendChild(mainCard);


  }





function viewImage(event, index) {
    const input = event.target;
    if (!input.files || input.files.length === 0) return;

    const reader = new FileReader();

    reader.onload = function () {
        const dataURL = reader.result;
        
        // Show the cropping container
        const croppedImage = document.getElementById("croppedImg" + index);
        croppedImage.src = dataURL;

       

        // Destroy previous cropper if exists
        if (croppedImage.cropperInstance) {
            croppedImage.cropperInstance.destroy();
        }

        const cropper = new Cropper(croppedImage, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true,
        });

        croppedImage.cropperInstance = cropper;

        const saveButton = document.getElementById("saveButton" + index);

        const newSaveButton = saveButton.cloneNode(true);
        saveButton.parentNode.replaceChild(newSaveButton, saveButton);

        newSaveButton.addEventListener("click", function () {
            const croppedCanvas = cropper.getCroppedCanvas();
            croppedImage.src = croppedCanvas.toDataURL();

            const timestamp = new Date().getTime();
            const fileName = `cropped-img-${timestamp}-${index}.png`;

            croppedCanvas.toBlob((blob) => {
                const imgFile = new File([blob], fileName, { type: "image/png" });

                const inputField = document.getElementById("input" + index);
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                inputField.files = fileList.files;

                cropper.destroy();
                croppedImage.cropperInstance = null;
            }, "image/png");
        });
    };

    reader.readAsDataURL(input.files[0]);
}



const selectedImages = [];

document.getElementById("input1").addEventListener("change",handleFileSelect)


function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    const files = event.target.files;

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        selectedImages.push(file);

        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");

        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "50px";
        img.style.height = "auto";

        const removeIcon = document.createElement("span");
        removeIcon.innerHTML = "&times;";
        removeIcon.classList.add("remove-icon"); // Add this for styling
        removeIcon.style.cursor = "pointer";
        removeIcon.style.marginLeft = "5px";

        removeIcon.addEventListener("click", function () {
            const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1);
            }
            thumbnail.remove();
        });

        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
    }
}



function validateForm() {
              clearErrorMessages();
              const name = document.getElementsByName('productName')[0].value;
              const description = document.getElementById('descriptionid').value;
             
            //   const brand = document.getElementsByName('brand')[0].value;
              const price = document.getElementById('regularPrice').value;
              const saleprice = document.getElementById('salesPrice').value;
              const volume = document.getElementById('volume').value;
              const category = document.getElementsByName('categoryId')[0].value;
              const images = document.getElementById('input1')
              const  stock=document.getElementById('stock').value
              
              let isValid = true

          
              if (name.trim() === "") {
      displayErrorMessage('productName-error', 'Please enter a product name.');
      isValid = false;
   }else if(name.trim().length<3){
      displayErrorMessage('productName-error','Product name should be atleast 3 characters long')
      isValid = false
   }
   
   
   else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
      displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
      isValid = false;
   }
            
   if (description.trim() === "") {
      displayErrorMessage('description-error', 'Please enter a product description.');
      isValid = false;
   }
   
//     else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
//       displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
//       isValid = false;
//    }
            
            if(category === ''){
                displayErrorMessage('category-error','Please select a category');
                isValid=false;
            }
           
  
  
              if ( parseInt(stock) < 0) {
                  displayErrorMessage('stock-error', 'Please enter a valid non-negative quantity.');
                  isValid = false;
              }
  
  
  
  
              if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                  displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
              }
  
  
  
  
              if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                  displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
              }
              if (parseFloat(price) < parseFloat(saleprice)) {
            
                  displayErrorMessage('salePrice-error', 'Sale price should not be greater than regular price');
                    isValid = false;
               }

    if (stock.trim() === "") {
                  displayErrorMessage('stock-error', 'Please enter the quantity.');
                  isValid = false;
              } else if(parseInt(stock)<=0){
                displayErrorMessage('stock-error', 'Quantity must be greater than zero')
              }
  
  
              if (volume.trim() === "") {
                  displayErrorMessage('volume-error', 'Please enter the volume.');
                  isValid = false;
              }
  
  
            //   if (images.files.length === 0) {
            //       displayErrorMessage("images-error",'Please select an image.');
            //       isValid = false;
            //   }
             
              const inputs = ['input1', 'input2', 'input3', 'input4'];
              let hasImage = false;
                 for (const inputId of inputs) {
                      const fileInput = document.getElementById(inputId);
                     if (fileInput && fileInput.files.length > 0) {
                      hasImage = true;
                       break;
                 }
              }
           if (!hasImage) {
                  displayErrorMessage('images-error', 'Please upload at least one product image.');
                  isValid = false;
                 }




              return isValid;
          }


          function displayErrorMessage(elementId, message) {
              var errorElement = document.getElementById(elementId);
              errorElement.innerText = message;
              errorElement.style.display = "block";
          }
  
  
          function clearErrorMessages() {
              const errorElements = document.getElementsByClassName('error-message');
              Array.from(errorElements).forEach(element => {
                  element.innerText = '';
              });
              const errorMessage = document.getElementById('errorMessage');
  
  
          }






</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

</body>




     
<%- include("../../views/partials/admin/footer") %>



